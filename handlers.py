from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from parsing import (
    parse, products_finally, main_checkpricesandnotify,
    activateadd, deactivateremove, get_active_users, periodcheck, add_model_for_user,
    remove_model_for_user, get_models_for_user)
from keyboard import takethemodel, mainkeyboard
import asyncio
chat_id = 1653541807
# prices_file = 'parser.csv'
# users_file = 'activate_users.txt'
router = Router()

@router.message(Command('start'))
async def start_main(message: Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! \n' 
                         '–û –∫–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–≤—ã–º –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?üöÄ',
                          reply_markup=mainkeyboard())

@router.message(F.text == '‚úÖActivate')
async def activatefunc(message: Message):
    await activateadd(message.from_user.id)
    await message.answer('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ü–µ–Ω')

@router.message(F.text == '‚ùåDeactivate')
async def deactivatefunc(message: Message):
    await deactivateremove(message.from_user.id)
    await message.answer('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.')

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å')
async def add_model_button(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', reply_markup=takethemodel())

@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å')
async def remove_model_button(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=takethemodel())

@router.message(F.text.in_(['üçèApple','üèÖHonor','üéäRedmi','‚ú®HUAWEI','ü¶æASUS','üéÆMSI','üíªThunderobot','üé±INFINIX']))
async def model_choice(message: Message):
    model_map = {
        'üçèApple': 'Apple',
        'üèÖHonor': 'Honor',
        'üéäRedmi': 'Redmi',
        '‚ú®HUAWEI': 'HUAWEI',
        'ü¶æASUS': 'ASUS',
        'üéÆMSI': 'MSI',
        'üíªThunderobot': 'Thunderobot',
        'üé±INFINIX': 'INFINIX',
    }
    model_name = model_map.get(message.text)
    user_models = get_models_for_user(message.from_user.id)
    if model_name in user_models:
        remove_model_for_user(message.from_user.id, model_name)
        await message.answer(f'–ú–æ–¥–µ–ª—å "{model_name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.', reply_markup=mainkeyboard())
    else:
        add_model_for_user(message.from_user.id, model_name)
        await message.answer(f'–ú–æ–¥–µ–ª—å "{model_name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!', reply_markup=mainkeyboard())

@router.message(F.text == '–ú–æ–∏ –º–æ–¥–µ–ª–∏')
async def get_my_models(message: Message):
    models = get_models_for_user(message.from_user.id)
    if not models:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å".')
    else:
        await message.answer('–í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n' + '\n'.join(models))


